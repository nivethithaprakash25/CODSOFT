#include <iostream>
#include <vector>
#include <string>
using namespace std;
struct Task {
    string description;
    bool completed;
    Task(string desc) : description(desc), completed(false) {}
};
void displayMenu();
void addTask(vector<Task>& tasks);
void viewTasks(const vector<Task>& tasks);
void markTaskCompleted(vector<Task>& tasks);
void deleteTask(vector<Task>& tasks);
int main() {
    vector<Task> tasks;
    int choice;
    while (true) {
        displayMenu();
        cin >> choice;
        cin.ignore();
        switch (choice) {
            case 1:
                addTask(tasks);
                break;
            case 2:
                viewTasks(tasks);
                break;
            case 3:
                markTaskCompleted(tasks);
                break;
            case 4:
                deleteTask(tasks);
                break;
            case 5:
                cout << "Exiting To-Do List Manager. Goodbye!" << endl;
                return 0;
            default:
                cout << "Invalid option. Please try again." << endl;
        }
    }
    return 0;
}
void displayMenu() {
    cout << "\nTo-Do List Manager" << endl;
    cout << "1. Add Task" << endl;
    cout << "2. View Tasks" << endl;
    cout << "3. Mark Task as Completed" << endl;
    cout << "4. Remove Task" << endl;
    cout << "5. Exit" << endl;
    cout << "Choose an option: ";
}
void addTask(vector<Task>& tasks) {
    string taskDescription;
    cout << "Enter a new task: ";
    getline(cin, taskDescription);
    tasks.push_back(Task(taskDescription));
    cout << "Task '" << taskDescription << "' added." << endl;
}
void viewTasks(const vector<Task>& tasks) {
    if (tasks.empty()) {
        cout << "No tasks available." << endl;
    } else {
        cout << "\nTasks:" << endl;
        for (size_t i = 0; i < tasks.size(); ++i) {
            cout << i + 1 << ". " << tasks[i].description
                 << " [" << (tasks[i].completed ? "Completed" : "Pending") << "]" << endl;
        }
    }
}
void markTaskCompleted(vector<Task>& tasks) {
    viewTasks(tasks);
    if (!tasks.empty()) {
        int taskNum;
        cout << "Enter the task number to mark as completed: ";
        cin >> taskNum;
        cin.ignore(); 
        if (taskNum > 0 && taskNum <= tasks.size()) {
            tasks[taskNum - 1].completed = true;
            cout << "Task '" << tasks[taskNum - 1].description << "' marked as completed." << endl;
        } else {
            cout << "Invalid task number." << endl;
        }
    }
}
void deleteTask(vector<Task>& tasks) {
    viewTasks(tasks);
    if (!tasks.empty()) {
        int taskNum;
        cout << "Enter the task number to delete: ";
        cin >> taskNum;
        cin.ignore();
        if (taskNum > 0 && taskNum <= tasks.size()) {
            cout << "Task '" << tasks[taskNum - 1].description << "' deleted." << endl;
            tasks.erase(tasks.begin() + taskNum - 1);
        } else {
            cout << "Invalid task number." << endl;
        }
    }
}
